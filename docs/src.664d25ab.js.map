{"version":3,"sources":["gl/shader.ts","gl/buffer.ts","gl/texture.ts","gl/gl.ts","shaders/standard.vert","shaders/ruler.frag","shaders/number/number.vert","shaders/number/number.frag","numbers.ts","index.ts"],"names":["module","exports"],"mappings":"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","file":"src.664d25ab.js","sourceRoot":"../src","sourcesContent":["function compileShader(gl: WebGLRenderingContext, type: number, src: string): WebGLShader {\n  const shader = gl.createShader(type)\n  if (!shader) {\n    throw new Error(\"Cannot create new GL Shader\")\n  }\n  gl.shaderSource(shader, src)\n  gl.compileShader(shader)\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    throw new Error('compile error: ' + gl.getShaderInfoLog(shader))\n  }\n  return shader\n}\n\nfunction createShaderProgram(gl: WebGLRenderingContext, vertexShader: string, fragmentShader: string): WebGLProgram {\n  const program = gl.createProgram()\n  if (!program) {\n    throw new Error(\"Cannot create new GL Program\")\n  }\n  gl.attachShader(program, compileShader(gl, gl.VERTEX_SHADER, vertexShader))\n  gl.attachShader(\n    program,\n    compileShader(gl, gl.FRAGMENT_SHADER, fragmentShader)\n  )\n  gl.linkProgram(program)\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    throw new Error('link error: ' + gl.getProgramInfoLog(program))\n  }\n  return program\n}\n\nfunction extractArrayNumber(str: string): number {\n  return parseInt(str.slice(1, -1), 10)\n}\n\ntype Uniforms = Record<string, { type: keyof UniformFunctionsByType, location?: WebGLUniformLocation }>\n\nfunction attachUniform(uniforms: Uniforms, name: string, type: string) {\n  if (uniforms[name]) {\n    throw new Error(`uniform declared more than once`)\n  }\n  uniforms[name] = { type: type as keyof UniformFunctionsByType }\n}\n\nfunction extractUniforms(str: string): Uniforms {\n  const re = /uniform (\\w+(\\[\\d+])?) ([a-zA-Z0-9_]*)(\\[\\d+])?;/gm\n  let match\n  const uniforms: Uniforms = {}\n  while ((match = re.exec(str)) !== null) {\n    console.log(match)\n    const [_, type, arrayType, varName, arrayTypeInName] = match\n    if (arrayType || arrayTypeInName) {\n      const num = extractArrayNumber(arrayType || arrayTypeInName)\n      const typeWithoutArray = type.replace(arrayType || '', '')\n      const nameWithoutArray = varName.replace(arrayTypeInName || '', '')\n      if (type.startsWith('mat')) {\n        for (let i = 0; i < num; i++) {\n          const name = `${nameWithoutArray}[${i}]`\n          attachUniform(uniforms, name, typeWithoutArray)\n        }\n      } else {\n        attachUniform(uniforms, nameWithoutArray, typeWithoutArray + 'Array')\n      }\n    } else {\n      attachUniform(uniforms, varName, type)\n    }\n  }\n  console.log(uniforms)\n  return uniforms\n}\n\ntype UniformFunctionsByType = {\n  float: (location: WebGLUniformLocation | null, data: number) => void,\n  floatArray: (location: WebGLUniformLocation | null, data: Float32List) => void,\n  int: (location: WebGLUniformLocation | null, data: number) => void,\n  // uint: (location: WebGLUniformLocation | null, data) => void,\n  sampler2D: (location: WebGLUniformLocation | null, data: number) => void,\n  sampler2DArray: (location: WebGLUniformLocation | null, data: Int32List) => void,\n  sampler3D: (location: WebGLUniformLocation | null, data: number) => void,\n  vec2: (location: WebGLUniformLocation | null, data: Float32List) => void,\n  vec3: (location: WebGLUniformLocation | null, data: Float32List) => void,\n  vec4: (location: WebGLUniformLocation | null, data: Float32List) => void,\n  mat2: (location: WebGLUniformLocation | null, data: Float32List) => void,\n  mat3: (location: WebGLUniformLocation | null, data: Float32List) => void,\n  mat4: (location: WebGLUniformLocation | null, data: Float32List) => void,\n}\n\nexport class Shader {\n  readonly program: WebGLProgram;\n  private readonly _uniformFuncByType: UniformFunctionsByType;\n  private readonly _uniforms: Uniforms\n  private readonly _attributes: any\n\n  constructor(private readonly gl: WebGLRenderingContext, vertexShader: string, fragmentShader: string) {\n    this.program = createShaderProgram(gl, vertexShader, fragmentShader)\n    this._uniforms = extractUniforms(vertexShader + fragmentShader)\n    this._attributes = {}\n    this._uniformFuncByType = {\n      float: (location: WebGLUniformLocation | null, data: number) => gl.uniform1f(location, data),\n      floatArray: (location: WebGLUniformLocation | null, data: Float32List) => gl.uniform1fv(location, data),\n      int: (location: WebGLUniformLocation | null, data: number) => gl.uniform1i(location, data),\n      // uint: (location: WebGLUniformLocation | null, data) => gl.uniform1ui(location, data),\n      sampler2D: (location: WebGLUniformLocation | null, data: number) => gl.uniform1i(location, data),\n      sampler2DArray: (location: WebGLUniformLocation | null, data: Int32List) => gl.uniform1iv(location, data),\n      sampler3D: (location: WebGLUniformLocation | null, data: number) => gl.uniform1i(location, data),\n      vec2: (location: WebGLUniformLocation | null, data: Float32List) => gl.uniform2fv(location, data),\n      vec3: (location: WebGLUniformLocation | null, data: Float32List) => gl.uniform3fv(location, data),\n      vec4: (location: WebGLUniformLocation | null, data: Float32List) => gl.uniform4fv(location, data),\n      mat2: (location: WebGLUniformLocation | null, data: Float32List) => gl.uniformMatrix2fv(location, false, data),\n      mat3: (location: WebGLUniformLocation | null, data: Float32List) => gl.uniformMatrix3fv(location, false, data),\n      mat4: (location: WebGLUniformLocation | null, data: Float32List) => gl.uniformMatrix4fv(location, false, data)\n    }\n  }\n\n  uniforms(uniforms: Record<string, number | Float32List | Int32List>) {\n    const gl = this.gl\n    gl.useProgram(this.program)\n    for (const name in uniforms) {\n      const uniform = this._uniforms[name]\n      if (!uniform) continue\n      const location =\n        uniform.location || gl.getUniformLocation(this.program, name)\n      if (!location) continue\n      uniform.location = location\n      const setUniformOfType = this._uniformFuncByType[uniform.type]\n      setUniformOfType(location, uniforms[name] as any)\n    }\n  }\n\n  draw(buffers: any, uniforms: Record<string, number | Float32List | Int32List>, mode?: GLenum) {\n    const indexBuffer = buffers.indexBuffer\n    const vertexBuffers = indexBuffer ? buffers.vertexBuffers : buffers\n    const gl = this.gl\n    this.uniforms(uniforms || {})\n    // Create and enable attribute pointers as necessary.\n    let length = 0\n    let attribute = null\n    for (attribute in vertexBuffers) {\n      const buffer = vertexBuffers[attribute]\n      const location =\n        this._attributes[attribute] ||\n        gl.getAttribLocation(this.program, attribute)\n      if (location == -1 || !buffer.buffer) continue\n      this._attributes[attribute] = location\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer.buffer)\n      gl.enableVertexAttribArray(location)\n      gl.vertexAttribPointer(\n        location,\n        buffer.spacing,\n        gl.FLOAT,\n        false,\n        0,\n        0\n      )\n      length = buffer.length / buffer.spacing\n    }\n\n    // Disable unused attribute pointers.\n    for (attribute in this._attributes) {\n      if (!(attribute in vertexBuffers)) {\n        gl.disableVertexAttribArray(this._attributes[attribute])\n      }\n    }\n    if (length) {\n      if (!indexBuffer) {\n        gl.drawArrays(mode || gl.TRIANGLE_STRIP, 0, length)\n      } else {\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer.buffer)\n        gl.drawElements(\n          mode || gl.TRIANGLES,\n          indexBuffer.bufferLength,\n          gl.UNSIGNED_SHORT,\n          0\n        )\n      }\n    }\n  }\n}\n","export type Newable<T> = { new (...args: any[]): T; };\n\nexport class Buffer<T extends Float32Array | Int32Array> {\n  buffer: WebGLBuffer | null = null\n  length = 0\n  spacing = 0\n  data: number[][] = []\n  constructor(private readonly gl: WebGLRenderingContext, private readonly target: GLenum, readonly type: Newable<T>) {\n    this.gl = gl\n    this.type = type\n  }\n\n  compile(type?: GLenum) {\n    const gl = this.gl\n    let data: number[] = []\n    for (let i = 0, chunk = 10000; i < this.data.length; i += chunk) {\n      data = Array.prototype.concat.apply(data, this.data.slice(i, i + chunk))\n    }\n    const spacing = this.data.length ? data.length / this.data.length : 0\n    if (spacing != Math.round(spacing)) {\n      throw new Error(\n        'buffer elements not of consistent size, average size is ' + spacing\n      )\n    }\n    this.buffer = this.buffer || gl.createBuffer()\n    this.length = data.length\n    this.spacing = spacing\n    gl.bindBuffer(this.target, this.buffer)\n    gl.bufferData(this.target, new this.type(data), type || gl.STATIC_DRAW)\n  }\n}\n\nexport class Mesh {}\n","// TODO - figure out simple way of sharing without making global\nlet framebuffer: WebGLFramebuffer | null = null\nconst renderbuffer: WebGLRenderbuffer | null = null\n\nexport class Texture {\n  readonly id: WebGLTexture | null\n  constructor(private readonly gl: WebGLRenderingContext, readonly width: number, readonly height: number, options: any) {\n    this.id = gl.createTexture()\n    const format = options.format || gl.RGBA\n    const type = options.type || gl.UNSIGNED_BYTE\n    const magFilter = options.filter || options.magFilter || gl.LINEAR\n    const minFilter = options.filter || options.minFilter || gl.LINEAR\n    if (type === gl.FLOAT) {\n      if (!canUseFloatingPointTextures(gl)) {\n        throw new Error('OES_texture_float is required but not supported')\n      }\n      if (\n        (minFilter !== gl.NEAREST || magFilter !== gl.NEAREST) &&\n        !canUseFloatingPointLinearFiltering(gl)\n      ) {\n        throw new Error(\n          'OES_texture_float_linear is required but not supported'\n        )\n      }\n    }\n    gl.bindTexture(gl.TEXTURE_2D, this.id)\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter)\n    gl.texParameteri(\n      gl.TEXTURE_2D,\n      gl.TEXTURE_WRAP_S,\n      options.wrap || options.wrapS || gl.REPEAT\n    )\n    gl.texParameteri(\n      gl.TEXTURE_2D,\n      gl.TEXTURE_WRAP_T,\n      options.wrap || options.wrapT || gl.REPEAT\n    )\n    if (options.data instanceof Image || options.data instanceof HTMLCanvasElement) {\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,\n        gl.RGBA, //gl.RGBA32F,\n        format,\n        type,\n        options.data || null\n      )\n    } else {\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,\n        gl.RGBA, //gl.RGBA32F,\n        width,\n        height,\n        0,\n        format,\n        type,\n        options.data || null\n      )\n    }\n  }\n\n  drawTo(callback: () => void) {\n    const gl = this.gl\n    const v = gl.getParameter(gl.VIEWPORT)\n    framebuffer = framebuffer || gl.createFramebuffer()\n    // renderbuffer = renderbuffer || gl.createRenderbuffer()\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer)\n    // gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer)\n    // if (\n    //   this.width != renderbuffer.width ||\n    //   this.height != renderbuffer.height\n    // ) {\n    //   renderbuffer.width = this.width\n    //   renderbuffer.height = this.height\n    //   gl.renderbufferStorage(\n    //     gl.RENDERBUFFER,\n    //     gl.DEPTH_COMPONENT16,\n    //     this.width,\n    //     this.height\n    //   )\n    // }\n    gl.framebufferTexture2D(\n      gl.FRAMEBUFFER,\n      gl.COLOR_ATTACHMENT0,\n      gl.TEXTURE_2D,\n      this.id,\n      0\n    )\n    // gl.framebufferRenderbuffer(\n    //   gl.FRAMEBUFFER,\n    //   gl.DEPTH_ATTACHMENT,\n    //   gl.RENDERBUFFER,\n    //   renderbuffer\n    // )\n    if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {\n      throw new Error(\n        'Rendering to this texture is not supported (incomplete framebuffer)'\n      )\n    }\n    gl.viewport(0, 0, this.width, this.height)\n\n    callback()\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null)\n    // gl.bindRenderbuffer(gl.RENDERBUFFER, null)\n    gl.viewport(v[0], v[1], v[2], v[3])\n  }\n\n  bind(unit: number) {\n    const gl = this.gl\n    gl.activeTexture(gl.TEXTURE0 + (unit || 0))\n    gl.bindTexture(gl.TEXTURE_2D, this.id)\n  }\n\n  unbind(unit: number) {\n    const gl = this.gl\n    gl.activeTexture(gl.TEXTURE0 + (unit || 0))\n    gl.bindTexture(gl.TEXTURE_2D, null)\n  }\n}\n\nfunction canUseFloatingPointTextures(gl: WebGLRenderingContext) {\n  // console.log(gl.getSupportedExtensions())\n  return !!gl.getExtension('EXT_color_buffer_float')\n  // return !!gl.getExtension('OES_texture_float')\n}\nfunction canUseFloatingPointLinearFiltering(gl: WebGLRenderingContext) {\n  return !!gl.getExtension('OES_texture_float_linear')\n}\n//\n// export class Texture3D {\n//   constructor(gl, width, height, depth, options) {\n//     this.gl = gl\n//     this.id = gl.createTexture()\n//     this.width = width\n//     this.height = height\n//     this.depth = depth\n//\n//     const format = options.format || gl.RGBA\n//     const type = options.type || gl.UNSIGNED_BYTE\n//     const magFilter = options.filter || options.magFilter || gl.LINEAR\n//     const minFilter = options.filter || options.minFilter || gl.LINEAR\n//     if (type === gl.FLOAT) {\n//       if (!canUseFloatingPointTextures(gl)) {\n//         throw new Error('OES_texture_float is required but not supported')\n//       }\n//       if (\n//         (minFilter !== gl.NEAREST || magFilter !== gl.NEAREST) &&\n//         !canUseFloatingPointLinearFiltering(gl)\n//       ) {\n//         throw new Error(\n//           'OES_texture_float_linear is required but not supported'\n//         )\n//       }\n//     }\n//     gl.bindTexture(gl.TEXTURE_3D, this.id)\n//     gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1)\n//     gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MAG_FILTER, magFilter)\n//     gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MIN_FILTER, minFilter)\n//     gl.texParameteri(\n//       gl.TEXTURE_3D,\n//       gl.TEXTURE_WRAP_S,\n//       options.wrap || options.wrapS || gl.REPEAT\n//     )\n//     gl.texParameteri(\n//       gl.TEXTURE_3D,\n//       gl.TEXTURE_WRAP_T,\n//       options.wrap || options.wrapT || gl.REPEAT\n//     )\n//     gl.texParameteri(\n//       gl.TEXTURE_3D,\n//       gl.TEXTURE_WRAP_R,\n//       options.wrap || options.wrapR || gl.CLAMP_TO_EDGE\n//     )\n//\n//     gl.texImage3D(\n//       gl.TEXTURE_3D,\n//       0,\n//       gl.RGBA32F,\n//       width,\n//       height,\n//       depth,\n//       0,\n//       format,\n//       type,\n//       options.data || null\n//     )\n//   }\n//\n//   drawTo(depth, callback) {\n//     const gl = this.gl\n//     const v = gl.getParameter(gl.VIEWPORT)\n//     framebuffer = framebuffer || gl.createFramebuffer()\n//     // renderbuffer = renderbuffer || gl.createRenderbuffer()\n//     gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer)\n//     // gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer)\n//     // if (\n//     //   this.width != renderbuffer.width ||\n//     //   this.height != renderbuffer.height\n//     // ) {\n//     //   renderbuffer.width = this.width\n//     //   renderbuffer.height = this.height\n//     //   gl.renderbufferStorage(\n//     //     gl.RENDERBUFFER,\n//     //     gl.DEPTH_COMPONENT16,\n//     //     this.width,\n//     //     this.height\n//     //   )\n//     // }\n//     gl.framebufferTextureLayer(\n//       gl.FRAMEBUFFER,\n//       gl.COLOR_ATTACHMENT0,\n//       this.id,\n//       0,\n//       depth\n//     )\n//     // gl.framebufferRenderbuffer(\n//     //   gl.FRAMEBUFFER,\n//     //   gl.DEPTH_ATTACHMENT,\n//     //   gl.RENDERBUFFER,\n//     //   renderbuffer\n//     // )\n//     if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {\n//       throw new Error(\n//         'Rendering to this texture is not supported (incomplete framebuffer)'\n//       )\n//     }\n//     gl.viewport(0, 0, this.width, this.height)\n//\n//     callback()\n//\n//     gl.bindFramebuffer(gl.FRAMEBUFFER, null)\n//     // gl.bindRenderbuffer(gl.RENDERBUFFER, null)\n//     gl.viewport(v[0], v[1], v[2], v[3])\n//   }\n//\n//   bind(unit) {\n//     const gl = this.gl\n//     gl.activeTexture(gl.TEXTURE0 + (unit || 0))\n//     gl.bindTexture(gl.TEXTURE_3D, this.id)\n//   }\n//\n//   unbind(unit) {\n//     const gl = this.gl\n//     gl.activeTexture(gl.TEXTURE0 + (unit || 0))\n//     gl.bindTexture(gl.TEXTURE_3D, null)\n//   }\n// }\n","import { Shader } from './shader'\nimport { Buffer } from './buffer'\nimport { Texture } from './texture'\n\nfunction createGlContext(canvas: HTMLCanvasElement): WebGLRenderingContext {\n  let gl\n  try {\n    gl = canvas.getContext('webgl')\n    // eslint-disable-next-line no-empty\n  } catch (e) {}\n  // try {\n  //   gl = gl || canvas.getContext('experimental-webgl')\n  //   // eslint-disable-next-line no-empty\n  // } catch (e) {}\n  if (!gl) throw new Error('WebGL not supported')\n  return gl\n}\n\nexport class GL {\n  readonly gl: WebGLRenderingContext\n  private _onUpdate: ((time: number) => void) | null = null\n  private _onDraw: (() => void) | null = null\n  private _time = 0\n  private _intervalId: number | null = null\n  running = false\n\n  constructor(readonly canvas: HTMLCanvasElement) {\n    this.canvas = canvas\n    this.gl = createGlContext(canvas)\n  }\n\n  createTexture(width: number, height: number, options: any) {\n    return new Texture(this.gl, width, height, options)\n  }\n\n  // createTexture3D(width: number, height: number, depth: number, options: any) {\n  //   return new Texture3D(this.gl, width, height, depth, options)\n  // }\n\n  createShader(vertexShader: string, fragmentShader: string) {\n    return new Shader(this.gl, vertexShader, fragmentShader)\n  }\n\n  createBuffer(target: GLenum, type: any) {\n    return new Buffer(this.gl, target, type)\n  }\n\n  onUpdate(cb: (time: number) => void) {\n    this._onUpdate = cb\n  }\n\n  onDraw(cb: () => void) {\n    this._onDraw = cb\n  }\n\n  viewport(width: number, height: number) {\n    this.gl.viewport(0, 0, width, height)\n  }\n\n  clear(r?: number, g?: number, b?: number, a?: number) {\n    const gl = this.gl\n    gl.clearColor(r || 0.0, g || 0.0, b || 0.0, a || 1.0)\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n  }\n\n  start() {\n    if (this.running) return\n    this._time = new Date().getTime()\n    this.running = true\n    this.update()\n  }\n\n  stop() {\n    if (!this.running) return\n    this.running = false\n    if (this._intervalId) {\n      window.cancelAnimationFrame(this._intervalId)\n      this._intervalId = null\n    }\n  }\n\n  private update = () => {\n    if (!this.running) return\n    const now = new Date().getTime()\n    if (this._onUpdate) this._onUpdate((now - this._time) / 1000)\n    if (this._onDraw) this._onDraw()\n    this._intervalId = window.requestAnimationFrame(this.update)\n    this._time = now\n  }\n}\n","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nattribute vec4 aVertexPosition;\\nattribute vec2 aTextureCoord;\\nvarying vec2 vTextureCoord;\\n\\nvoid main() {\\n  vTextureCoord = aTextureCoord;\\n  gl_Position = aVertexPosition;\\n}\\n\";","module.exports=\"precision highp float;\\nprecision highp sampler2D;\\n#define GLSLIFY 1\\n\\nvarying vec2 vTextureCoord;\\nuniform float uWidth; // = 500.0;\\nuniform float uOffset; //= 10.0;\\nuniform float uScale; //= 10.0;\\n//float uScale = 10.0;\\nuniform float uMargin; //= 10.0;\\nfloat maxHeight = 15.0;\\n\\nvec4 white = vec4(1.0);\\nvec4 lightGrey = vec4(232.0/255.0, 234.0/255.0, 237.0/255.0, 1.0);\\nvec4 darkGrey = vec4(189.0/255.0, 193.0/255.0, 198.0/255.0, 1.0);\\nfloat modI(float a,float b) {\\n    float m=a-floor((a+0.5)/b)*b;\\n    return floor(m+0.5);\\n}\\nbool isTick(float x, float y) {\\n    bool not = !(modI(x, uScale * 6.0) <= 0.0001);\\n    // 7px\\n    bool major = !(modI(x, (uScale*3.0)) > 0.0001) && y > 3.0 && y <= 9.0;\\n    // 3px\\n    bool minor = !(modI(x, uScale) > 0.0001) && y > 0.0 && y >= 5.0 && y <= 7.0;\\n    return  (not && (major || minor));\\n}\\n\\nvoid main() {\\n    float tick = 0.0;\\n    float x = floor(vTextureCoord.x);\\n    float y = floor(vTextureCoord.y);\\n    vec4 background = (x >= uOffset && x < uWidth + uOffset) ? white : lightGrey;\\n    bool drawTicks = y < 0.0001 || (x >= uOffset && x < uWidth + uOffset);\\n    vec4 grey = y < 0.0001 || isTick(x - uOffset - uMargin, y) && drawTicks ? darkGrey : background;\\n    gl_FragColor = grey;\\n}\\n\";","module.exports=\"precision highp float;\\n#define GLSLIFY 1\\n\\nattribute vec4 aVertexPosition;\\nattribute vec2 aTextureCoord;\\nattribute vec2 aViewDimensions;\\nvarying vec2 vTextureCoord;\\n\\nfloat scale(float v, float max) {\\n    return ((v / max) * 2.0) - 1.0;\\n}\\n\\nvoid main() {\\n    vTextureCoord = aTextureCoord;\\n    gl_Position = vec4(scale(aVertexPosition.x, aViewDimensions.x), scale(aVertexPosition.y, aViewDimensions.y), 0, 1);\\n}\\n\";","module.exports=\"precision highp float;\\nprecision highp sampler2D;\\n#define GLSLIFY 1\\n\\nuniform sampler2D uInputTexture;\\nuniform vec4 uColor;\\n\\nvarying vec2 vTextureCoord;\\n// out vec4 fragColor;\\n\\nvoid main() {\\n    gl_FragColor = texture2D(uInputTexture, vTextureCoord) * uColor;\\n}\\n\";","import { GL } from \"./gl/gl\";\nimport standardVertexShader from \"./shaders/number/number.vert\";\nimport textureFragmentShader from \"./shaders/number/number.frag\";\n\nfunction createTextCanvas(limit: number) {\n  const w = 20;\n  const h = 20;\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = w * limit;\n  canvas.height = h;\n  const ctx = canvas.getContext(\"2d\");\n  if (ctx == null) {\n    throw new Error(\"Could not get 2d context from canvas\");\n  }\n  ctx.fillStyle = \"#fff\"; // This determines the text colour, it can take a hex value or rgba value (e.g. rgba(255,0,0,0.5))\n  ctx.textAlign = \"center\"; // This determines the alignment of text, e.g. left, center, right\n  ctx.textBaseline = \"middle\"; // This determines the baseline of the text, e.g. top, middle, bottom\n  ctx.font = \"9px sans-serif\"; // This determines the size of the text and the font family used\n  for (let i = 0; i < limit; i++) {\n    ctx.fillText((i-Math.floor(limit/2)).toString(), i * w + w / 2, h / 2);\n  }\n  // document.body.append(canvas);\n  return canvas;\n}\n\nfunction createMesh(context: GL) {\n  const gl = context.gl;\n  const vertexBuffer = context.createBuffer(gl.ARRAY_BUFFER, Float32Array);\n  vertexBuffer.data = [\n    [-1, -1],\n    [1, -1],\n    [-1, 1],\n    [1, 1],\n  ];\n  vertexBuffer.compile();\n  const textureCoordBuffer = context.createBuffer(\n    gl.ARRAY_BUFFER,\n    Float32Array\n  );\n  textureCoordBuffer.data = [\n    [0, 1],\n    [1, 1],\n    [0, 0],\n    [1, 0],\n  ];\n  textureCoordBuffer.compile();\n  const viewBuffer = context.createBuffer(\n    gl.ARRAY_BUFFER,\n    Float32Array\n  );\n  viewBuffer.data = [\n    [0, 1 ],\n    [1, 1],\n    [0, 0],\n    [1, 0],\n  ];\n  viewBuffer.compile();\n  return {\n    aTextureCoord: textureCoordBuffer,\n    aVertexPosition: vertexBuffer,\n    aViewDimensions: viewBuffer,\n  };\n}\n\n\n\nfunction createTextTexture(context: GL, width: number, height: number) {\n  const limit = 20.0;\n  const limitHalf = Math.floor(limit/2);\n  const canvas = createTextCanvas(limit);\n  const texture = context.createTexture(canvas.width, canvas.height, {\n    data: canvas,\n    wrap: context.gl.CLAMP_TO_EDGE,\n    magFilter: context.gl.NEAREST,\n    minFilter: context.gl.NEAREST,\n  });\n  const mesh = createMesh(context);\n  const shader = context.createShader(\n    standardVertexShader,\n    textureFragmentShader,\n  );\n  const state: { verts: number[][]; cords: number[][], dims: number[][] } = {\n    verts: [],\n    cords: [],\n    dims: [],\n  };\n  return {\n    add(n: number, x: number, y: number) {\n      // console.log('n:', n, x, y, width)\n      // const nx = (x * 2.0 * xscale) - 1.0;\n      // const ny = (y * 2.0 * yscale) - 1.0;\n      const verts = [\n        [x - 10, y - 10],\n        [x + 10, y - 10],\n        [x - 10, y + 10],\n        [x + 10, y + 10],\n      ];\n      if (state.verts.length == 0) {\n        state.verts = verts;\n      } else {\n        state.verts.push(state.verts[state.verts.length-1])\n        state.verts.push(verts[0])\n        state.verts.push(...verts)\n      }\n      const cords = [\n        [(n+limitHalf) / limit, 0],\n        [(n+limitHalf+1) / limit, 0],\n        [(n+limitHalf) / limit, 1],\n        [(n+limitHalf+1) / limit, 1],\n      ];\n      if (state.cords.length == 0) {\n        state.cords = cords;\n      } else {\n        state.cords.push(state.cords[state.cords.length-1])\n        state.cords.push(cords[0])\n        state.cords.push(...cords)\n      }\n      // todo: make efficient\n      state.dims = state.verts.map(() => [width, height])\n    },\n    draw() {\n      mesh.aVertexPosition.data = state.verts;\n      mesh.aVertexPosition.compile();\n      mesh.aTextureCoord.data = state.cords;\n      mesh.aTextureCoord.compile();\n      mesh.aViewDimensions.data = state.dims;\n      mesh.aViewDimensions.compile();\n      texture.bind(0);\n      shader.draw(mesh, {\n        uInputTexture: 0,\n        uColor: [60/255,64/255,67/255, 1], //189.0/255.0, 193.0/255.0, 198.0/255.0, 1.0],\n      });\n      state.verts = []\n      state.cords = []\n    },\n  };\n}\n\nexport function createNumbers(context: GL, width: number, height: number) {\n  return createTextTexture(context, width, height);\n}\n","import { GL } from \"./gl/gl\";\nimport standardVertexShader from \"./shaders/standard.vert\";\nimport rulerFragmentShader from \"./shaders/ruler.frag\";\nimport { Buffer } from \"./gl/buffer\";\nimport { createNumbers } from \"./numbers\";\n\ntype RulerMesh = {\n  aTextureCoord: Buffer<any>;\n  aVertexPosition: Buffer<any>;\n};\n\nfunction createRulerMesh(\n  context: GL,\n  verticalOffset: number,\n  width: number,\n  height: number\n): RulerMesh {\n  const rulerHeight = 15;\n  const gl = context.gl;\n  const vertexBuffer = context.createBuffer(gl.ARRAY_BUFFER, Float32Array);\n  const v1 = (verticalOffset * rulerHeight * 2.0) / height - 1.0;\n  const v2 = ((verticalOffset + 1) * rulerHeight * 2.0) / height - 1.0;\n  vertexBuffer.data = [\n    [-1, v1],\n    [1, v1],\n    [-1, v2],\n    [1, v2],\n  ];\n  vertexBuffer.compile();\n  const textureCoordBuffer = context.createBuffer(\n    gl.ARRAY_BUFFER,\n    Float32Array\n  );\n  textureCoordBuffer.data = [\n    [0, rulerHeight],\n    [width, rulerHeight],\n    [0, 0],\n    [width, 0],\n  ];\n  textureCoordBuffer.compile();\n  return {\n    aTextureCoord: textureCoordBuffer,\n    aVertexPosition: vertexBuffer,\n  };\n}\n\nfunction createRuleUniforms({\n  width,\n  margin,\n  offset,\n  scale,\n}: {\n  width: number;\n  offset?: number;\n  scale?: number;\n  margin?: number;\n}) {\n  return {\n    uWidth: width,\n    uOffset: offset || 0,\n    uScale: scale || 10,\n    uMargin: margin || 0,\n  };\n}\n\nfunction osc(x: number) {\n  return (Math.sin(x * Math.PI * 2) + 1) / 2;\n}\n\nfunction createRulers(context: GL, width: number, height: number) {\n  const x = Math.ceil(height / 15);\n  const rulerMeshes = Array.from({ length: x }, (_, i) =>\n    createRulerMesh(context, i, width, height)\n  );\n  const shader = context.createShader(\n    standardVertexShader,\n    rulerFragmentShader\n  );\n  let acc = 0;\n  let t = 0;\n  let s = 0;\n  return {\n    update: (delta: number) => {\n      acc += delta;\n      t = (t + delta) % 1;\n      s = s + (delta % 10);\n    },\n    draw: (numbers: any) =>\n      rulerMeshes.forEach((mesh, i) => {\n        // where do we draw our numbers\n        const offset = 100 + Math.cos(acc + (i - 30) / 30) * 100;\n        const scale = i + (Math.sin(acc + (i + 40) * 0.2) * 0.5 + 1) * 20;\n        const width = 500 + Math.sin(acc + (i + 30) / 30) * 200;\n        const margin = (i + osc((acc + (i - 30) / 30) / 5) * 200) % width;\n        const step = scale * 6;\n        const range = Math.floor(width / step);\n        const tickOffset = Math.floor(margin / step);\n        const y = i * 15 + 7;\n        for (let x = 0; x <= range; x++) {\n          const next = x * step + offset + (margin % step);\n          if (next <= width + offset) numbers.add(x - tickOffset, next, y);\n        }\n        shader.draw(mesh, createRuleUniforms({ width, scale, offset, margin }));\n      }),\n  };\n}\n\nfunction ssss(v: number, m: number) {\n  return v - (v % m);\n}\n\nwindow.onload = () => {\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = window.innerWidth; //ssss(window.innerWidth, 256);\n  canvas.height = window.innerHeight; //ssss(window.innerWidth, 256);\n  console.log(canvas.height);\n  const gl = new GL(canvas);\n  gl.gl.enable(gl.gl.BLEND);\n  gl.gl.blendFunc(gl.gl.ONE, gl.gl.ONE_MINUS_SRC_ALPHA);\n  // gl.gl.blendFunc(gl.gl.SRC_COLOR, gl.gl.DST_COLOR);\n  gl.viewport(canvas.width, canvas.height);\n  const rulers = createRulers(gl, canvas.width, canvas.height);\n  const numbers = createNumbers(gl, canvas.width, canvas.height);\n  gl.onUpdate((t) => {\n    // console.log(t);\n    rulers.update(t);\n  });\n  gl.onDraw(() => {\n    gl.clear();\n    rulers.draw(numbers);\n    numbers.draw();\n  });\n  gl.start();\n  document.body.append(canvas);\n};\n"]}